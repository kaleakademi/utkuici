import requests
import sqlite3
import subprocess
import datetime
import socket
SIEMhost="127.0.0.1"
SIEMport=515
cikti=subprocess.check_output("ls",shell=True)
if not "exploitEdilebilir.db" in cikti:
	conn = sqlite3.connect('exploitEdilebilir.db')
	c = conn.cursor()
	c.execute('''CREATE TABLE zafiyetler
             (pluginID text, IP text,pluginName text,zaman text)''')
	c.close()
accessKey=""
secretKey=""
IP="127.0.0.1"
xapikeys="accessKey="+accessKey+"; secretKey="+secretKey+";"
header={'X-ApiKeys':xapikeys}
url="https://"+IP+":8834/scans"
sonuc=requests.get(url=url,headers=header,verify=False)
for i in sonuc.json()['scans']:
	url="https://"+IP+":8834/scans/"+str(i['id'])
	sonucTarama=requests.get(url=url,headers=header,verify=False)
	for j in  sonucTarama.json()['hosts']:
		#print j
		url="https://"+IP+":8834/scans/"+str(i['id'])+"/hosts/"+str(j['host_id'])
		IPSonuc=requests.get(url=url,headers=header,verify=False)
		for k in IPSonuc.json()['vulnerabilities']:
			url="https://"+IP+":8834/plugins/plugin/"+str(k['plugin_id'])
			pluginIcerik=requests.get(url=url,headers=header,verify=False)
			for plugin in pluginIcerik.json()['attributes']:
				if ("exploit_framework_metasploit" in plugin['attribute_name']) and ("true" in plugin['attribute_value']):
					IPSayisi=0
					conn=sqlite3.connect('exploitEdilebilir.db')
					c=conn.cursor()
					IPkontrol=c.execute('select * from zafiyetler where pluginID=? and IP=?',(str(k['plugin_id']),str(j['hostname'])))
					IPSayisi=len(IPkontrol.fetchall())
					conn.close()
					if IPSayisi<1:
						log=str(k['plugin_id'])+"|"+str(j['hostname'])+"|"+str(k['plugin_name'])+str(datetime.datetime.now())+"\n"
						conn=sqlite3.connect('exploitEdilebilir.db')
						c=conn.cursor()
						c.execute('INSERT INTO zafiyetler VALUES (?,?,?,?)',(str(k['plugin_id']),str(j['hostname']),str(k['plugin_name']),str(datetime.datetime.now())))
						conn.commit()
						conn.close()
        					s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        					s.connect((SIEMhost,SIEMport))
						s.sendall(log)
        					s.close()

